#version 400

layout(quads, equal_spacing, ccw) in;


uniform mat4 MVP;


in vec4 tcColor[];
in vec2 tcTexCoord[];


out vec4 teColor;
out vec2 teTexCoord;

vec4 interpolate(in vec4 v0, in vec4 v1, in vec4 v2, in vec4 v3)
{
	vec4 a = mix(v0, v1, gl_TessCoord.x);
	vec4 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
}

vec2 interpolate2(in vec2 v0, in vec2 v1, in vec2 v2, in vec2 v3)
{
	vec2 a = mix(v0, v1, gl_TessCoord.x);
	vec2 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
}

//void main()
//{	
//	gl_Position = interpolate(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position, gl_in[3].gl_Position);
//	teColor = interpolate(tcColor[0], tcColor[1], tcColor[2], tcColor[3]);
//	teTexCoord = interpolate2(tcTexCoord[0], tcTexCoord[1], tcTexCoord[2], tcTexCoord[3]);
//}

void main()
{
	float u = gl_TessCoord.x, v = gl_TessCoord.y;
	vec3 a = mix(gl_in[0].gl_Position, gl_in[3].gl_Position, u);
	vec3 b = mix(gl_in[12].gl_Position, gl_in[15].gl_Position, u);
	vec3 tePosition = mix(a, b, v);
	gl_Position = MVP * vec4(tePosition, 1);
	teColor = interpolate(tcColor[0], tcColor[3], tcColor[12], tcColor[15]);
	teTexCoord = interpolate2(tcTexCoord[0], tcTexCoord[3], tcTexCoord[12], tcTexCoord[15]);
}
